WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.850
本视频将讲解结果计算部分的答案

00:00:03.850 --> 00:00:08.535
首先 定义函数 calculates_results_stats

00:00:08.535 --> 00:00:14.519
这里的文档字符串指出我们只有一个输入参数

00:00:14.519 --> 00:00:16.794
即字典 results_dic

00:00:16.795 --> 00:00:20.895
该字典以图像文件名为键

00:00:20.894 --> 00:00:23.067
以列表为值

00:00:23.067 --> 00:00:26.774
其列表值包括宠物图像标签、分类器标签

00:00:26.774 --> 00:00:28.410
标签匹配结果

00:00:28.410 --> 00:00:32.000
以及标签对图像是否为犬类的判定结果

00:00:32.000 --> 00:00:38.094
函数会返回字典 results_stats

00:00:38.094 --> 00:00:41.039
该字典包含百分比和数量统计数据

00:00:41.039 --> 00:00:45.615
对算法的图像分类性能进行了汇总

00:00:45.615 --> 00:00:48.731
首先 创建一个空字典 results_stats

00:00:48.731 --> 00:00:53.615
该字典会将统计结果以百分比的形式记录下来

00:00:53.615 --> 00:00:57.929
接着 将所有计数器设为 0

00:00:57.929 --> 00:01:00.716
以便统计犬类图像的数量

00:01:00.716 --> 00:01:01.979
匹配数量

00:01:01.979 --> 00:01:03.854
得到正确分类的犬类图像数量

00:01:03.854 --> 00:01:06.194
得到正确分类的非犬类图像数量

00:01:06.194 --> 00:01:10.489
以及犬种得到正确分类的图像的数量

00:01:11.079 --> 00:01:14.579
接着 用 for 循环

00:01:14.579 --> 00:01:20.469
对字典 results_dic 进行迭代 适时对这些计数器进行增量

00:01:20.469 --> 00:01:22.484
如果标签匹配

00:01:22.484 --> 00:01:26.489
那就对匹配计数器 n_matches 进行增量

00:01:26.489 --> 00:01:29.681
如果两个标签都为犬类而且相同

00:01:29.682 --> 00:01:34.094
那就意味着犬种得到了正确分类 我们要对相应的计数器 n_correct_breed 进行增量

00:01:34.094 --> 00:01:37.394
如果宠物标签为犬类

00:01:37.394 --> 00:01:40.890
那就对犬类图像计数器 n_dogs_img 进行增量

00:01:40.890 --> 00:01:43.965
如果分类器标签也为犬类

00:01:43.965 --> 00:01:47.325
那就是犬类图像得到了正确分类 我们要对相应的计数器 n_correct_dogs 进行增量

00:01:47.325 --> 00:01:51.639
如果宠物标签和分类器标签都不为犬类

00:01:51.638 --> 00:01:55.494
那就是非犬类图像得到了正确分类 于是给相应的计数器 n_correct_notdogs 进行增量

00:01:55.495 --> 00:01:59.785
至此 循环访问字典 results_dic 的 for 循环结束

00:01:59.784 --> 00:02:06.914
接着 用 results_dic 的长度来计算总图像数

00:02:06.915 --> 00:02:11.879
非犬类图像数则等于

00:02:11.879 --> 00:02:16.756
图像数减去犬类图像数

00:02:16.756 --> 00:02:21.449
接着 计算各项百分比

00:02:21.449 --> 00:02:25.049
匹配百分比等于

00:02:25.050 --> 00:02:29.355
匹配数 / 图像数 * 100

00:02:29.354 --> 00:02:32.909
得到正确分类的犬类图像的百分比等于

00:02:32.909 --> 00:02:37.805
得到正确分类的犬类图像数 / 犬类图像数 * 100

00:02:37.805 --> 00:02:41.640
犬种得到正确分类的图像的百分比等于

00:02:41.639 --> 00:02:46.529
犬种得到正确分类的图像数 / 犬类图像数 * 100

00:02:46.530 --> 00:02:51.224
最后 哪怕只有一张非犬类图像

00:02:51.224 --> 00:02:56.449
我们都要计算得到正确分类的非犬类图像的百分比

00:02:56.449 --> 00:03:03.155
也即得到正确分类的非犬类图像数 / 非犬类图像数 * 100

00:03:03.155 --> 00:03:06.840
如果没有非犬类图像

00:03:06.840 --> 00:03:09.539
那就将该百分比设为 0

00:03:09.539 --> 00:03:10.949
在函数底部

00:03:10.949 --> 00:03:14.875
返回字典 results_stats

00:03:14.875 --> 00:03:16.300
在主函数里

00:03:16.300 --> 00:03:20.564
我们调用了函数 calculates_results_stats

00:03:20.564 --> 00:03:25.139
该函数会返回字典 results_stats_dic

00:03:25.139 --> 00:03:30.539
该字典包含各项百分比和数量统计 对算法的图像分类效果进行了汇总

00:03:30.539 --> 00:03:32.310
这个字典以统计数据名为键

00:03:32.310 --> 00:03:36.545
以统计数据值为值

00:03:36.544 --> 00:03:41.594
函数有一个输入参数 即字典 result_dic

00:03:41.594 --> 00:03:48.379
该字典由函数 adjust-results4-isadog 返回而出

00:03:48.379 --> 00:03:53.594
以图像文件名为键 以列表为值

00:03:53.594 --> 00:03:57.109
其列表值包括宠物图像标签、分类器标签

00:03:57.110 --> 00:03:58.737
标签匹配结果

00:03:58.737 --> 00:04:02.139
以及标签对图像是否为犬类的判定结果

00:04:02.139 --> 00:04:05.647
使用这里的临时代码来检查代码效果

00:04:05.647 --> 00:04:10.849
用字典 result_dic 重新计算一些数量统计和百分比数据

00:04:10.849 --> 00:04:16.490
然后将所得数据和百分比

00:04:16.490 --> 00:04:22.394
与由函数返回的字典 results_stats_dic  生成的相应数据进行比较

00:04:22.394 --> 00:04:25.539
要进行比较

00:04:25.540 --> 00:04:29.510
我们可以来到终端窗口 观察代码

00:04:29.509 --> 00:04:34.430
这里运行了程序 check_images.py

00:04:34.430 --> 00:04:37.555
这是函数的统计数据

00:04:37.555 --> 00:04:41.009
这是临时代码的统计数据

00:04:41.009 --> 00:04:42.709
两者一致

00:04:42.709 --> 00:04:45.000
可见代码无误

