WEBVTT
Kind: captions
Language: pt-BR

00:00:00.139 --> 00:00:05.211
Vou discutir tipos de dados
e funções mutáveis e imutáveis.

00:00:06.326 --> 00:00:09.673
Lembre que você discutiu
tipos de dados mutáveis e imutáveis

00:00:09.706 --> 00:00:12.114
nas aulas de Tipos de Dados
e Operadores,

00:00:12.467 --> 00:00:14.596
Listas e Operadores
de Associação.

00:00:15.041 --> 00:00:18.831
Relembrando: tipos de dados mutáveis
podem mudar depois de criados

00:00:18.864 --> 00:00:21.178
e tipos de dados imutáveis
não podem.

00:00:21.677 --> 00:00:24.821
Os tipos de dados imutáveis são:
valores booleanos, inteiros,

00:00:24.854 --> 00:00:26.971
ponto flutuante, ênuplas
e strings,

00:00:27.222 --> 00:00:31.201
enquanto tipos de dados mutáveis
são listas, dicionários e conjuntos.

00:00:32.461 --> 00:00:35.598
Como você aprendeu na aula
de Escopo Variável das Funções,

00:00:35.631 --> 00:00:38.603
tipos de dados imutáveis
passam para dentro de funções

00:00:38.636 --> 00:00:40.900
como cópias
do objeto original.

00:00:41.245 --> 00:00:44.218
Ou seja, mudanças
que ocorrerem com a cópia

00:00:44.324 --> 00:00:46.596
não vão afetar
o objeto original.

00:00:47.079 --> 00:00:49.086
Já os tipos de dados
mutáveis

00:00:49.119 --> 00:00:52.717
passam para as funções como
um apontador para o objeto original.

00:00:52.764 --> 00:00:55.946
Ou seja, mudanças que ocorrerem
com o apontador na função

00:00:56.068 --> 00:00:58.135
vão mudar o objeto original.

00:00:59.794 --> 00:01:02.823
Você pode revisar a aula
de Escopo Variável das Funções

00:01:02.856 --> 00:01:05.701
para recordar o escopo
de tipos de dados imutáveis.

00:01:05.857 --> 00:01:09.800
Neste vídeo vamos aprender mais
sobre o escopo dos tipos mutáveis

00:01:10.092 --> 00:01:11.874
com os próximos
três exemplos.

00:01:12.520 --> 00:01:14.696
Embora nossos exemplos
falem de listas,

00:01:14.729 --> 00:01:17.460
o mesmo vale para qualquer
tipo de dado mutável,

00:01:17.564 --> 00:01:19.516
como um dicionário
ou um conjunto.

00:01:20.067 --> 00:01:21.571
Em nosso primeiro exemplo,

00:01:21.604 --> 00:01:24.845
veremos como o escopo de uma lista
se estende em uma função

00:01:25.386 --> 00:01:27.561
quando essa lista é criada
fora da função

00:01:27.594 --> 00:01:30.448
para então entrar como argumento
dessa função.

00:01:31.571 --> 00:01:33.051
Em nosso segundo exemplo,

00:01:33.084 --> 00:01:36.170
veremos que um escopo de lista
é limitado a uma função

00:01:36.431 --> 00:01:38.531
se essa lista for criada
dentro da função,

00:01:38.564 --> 00:01:40.399
e não for o retorno
dessa função.

00:01:40.729 --> 00:01:42.367
Em nosso terceiro exemplo,

00:01:42.400 --> 00:01:45.609
vamos ver que o escopo de lista
pode ser estendido além da função

00:01:45.642 --> 00:01:49.078
se a lista for criada e retornada
por essa função.

00:01:49.549 --> 00:01:52.217
Nesses exemplos,
o código estará à esquerda

00:01:52.250 --> 00:01:54.572
e o que estiver rodando
na memória do computador

00:01:54.605 --> 00:01:56.310
estará visível à direita.

00:01:56.431 --> 00:02:00.370
Neste exemplo, vamos ver a lista
sendo criada fora da função

00:02:00.403 --> 00:02:03.807
e depois será colocada
como argumento da função.

00:02:07.023 --> 00:02:09.787
Na linha 1, nossa lista
é criada na memória,

00:02:09.820 --> 00:02:11.328
com o apontador "dogs",

00:02:11.361 --> 00:02:14.454
que aponta para o lugar
na memória onde a lista está.

00:02:16.022 --> 00:02:18.369
Na linha 2,
usamos o apontador "dogs"

00:02:18.402 --> 00:02:21.845
como argumento da função
edit_pets.

00:02:22.320 --> 00:02:24.432
Isso cria um segundo apontador,
"pets",

00:02:24.465 --> 00:02:28.283
que também aponta para o lugar
na memória onde a lista está.

00:02:28.845 --> 00:02:29.942
O apontador pets

00:02:29.975 --> 00:02:32.849
só existe na função
edit_pets.

00:02:35.034 --> 00:02:36.863
Na primeira linha
de edit_pets,

00:02:36.896 --> 00:02:39.024
o valor "Cody"
é removido da lista

00:02:39.412 --> 00:02:40.934
com o apontador pets.

00:02:41.204 --> 00:02:43.620
Assim, a string Cody
é removida da lista

00:02:44.211 --> 00:02:47.058
e o resto da lista
sofre ajuste

00:02:47.091 --> 00:02:49.565
para ocupar o espaço
deixado por Cody.

00:02:50.942 --> 00:02:52.944
Na segunda linha
de edit_pets

00:02:52.977 --> 00:02:56.028
o apontador pets é usado
para anexar Bella

00:02:56.244 --> 00:02:57.714
ao fim da lista.

00:02:57.964 --> 00:02:59.983
A terceira linha
de edit_pets

00:03:00.250 --> 00:03:02.817
o apontador pets
é usado para anexar Buddy

00:03:02.850 --> 00:03:04.472
ao fim da lista.

00:03:04.505 --> 00:03:07.104
Repare que o operador "+="

00:03:07.137 --> 00:03:10.167
pode ser usado para anexar valores
ao fim de uma lista.

00:03:11.073 --> 00:03:12.788
Na terceira linha do código

00:03:12.821 --> 00:03:14.900
exibimos a lista "dogs".

00:03:14.956 --> 00:03:16.864
Repare que, fora da função,

00:03:17.242 --> 00:03:20.448
o apontador pets
não existe mais na memória,

00:03:20.481 --> 00:03:25.001
mas as mudanças que pets
fez dentro da função

00:03:25.034 --> 00:03:27.382
continuam existindo
fora da função.

00:03:28.079 --> 00:03:29.747
Usando o apontador "dogs"

00:03:29.780 --> 00:03:31.110
a lista que vai ser exibida

00:03:31.143 --> 00:03:33.844
será a que foi alterada
pelo apontador pets

00:03:33.877 --> 00:03:35.207
dentro da função.

00:03:35.470 --> 00:03:39.187
Neste exemplo, vamos ver que uma
lista criada dentro de uma função

00:03:39.220 --> 00:03:41.346
e que não é retornada
por essa função

00:03:41.379 --> 00:03:43.710
só existe dentro
dessa função.

00:03:44.727 --> 00:03:48.085
Na linha 1, a função
edit_pets2 é chamada

00:03:48.118 --> 00:03:50.713
e nada existe ainda
na memória.

00:03:52.272 --> 00:03:54.096
Na primeira linha
de edit_pets2,

00:03:54.468 --> 00:03:57.448
nossa lista é criada na memória,
com o apontador pets,

00:03:57.481 --> 00:04:00.898
que aponta para o lugar
na memória onde a lista está.

00:04:02.333 --> 00:04:04.606
Na segunda linha
de edit_pets2,

00:04:04.639 --> 00:04:07.318
o valor Cody
é removido da lista

00:04:07.351 --> 00:04:08.702
com o apontador pets.

00:04:09.091 --> 00:04:11.740
A string Cody é removida
da lista

00:04:12.335 --> 00:04:15.537
e o resto da lista sofre um ajuste
para preencher o espaço

00:04:15.570 --> 00:04:17.027
deixado por Cody.

00:04:18.189 --> 00:04:20.138
Na terceira linha
de edit_pets2,

00:04:20.171 --> 00:04:23.049
o apontador pets é usado
para anexar Bella

00:04:23.082 --> 00:04:24.660
ao fim da lista.

00:04:26.266 --> 00:04:28.236
Na quarta linha
de edit_pets2,

00:04:28.269 --> 00:04:30.983
o apontador pets é usado
para anexar Buddy

00:04:31.016 --> 00:04:32.850
ao fim da lista.

00:04:34.467 --> 00:04:36.537
Na segunda linha do código,

00:04:36.570 --> 00:04:38.695
exibimos a string "Done".

00:04:38.957 --> 00:04:41.336
Repare que, fora da função,

00:04:41.369 --> 00:04:45.627
o apontador pets e a lista
não existem mais na memória.

00:04:46.592 --> 00:04:50.182
Neste exemplo, vemos que uma lista
criada dentro de uma função

00:04:50.215 --> 00:04:52.176
que é retornada
por essa função

00:04:52.336 --> 00:04:54.416
existe fora da função.

00:04:56.644 --> 00:04:59.580
Na linha 1, a função edit_pets3
é chamada

00:04:59.613 --> 00:05:02.185
e nada existe na memória,
ainda.

00:05:04.199 --> 00:05:06.168
Na primeira linha
de edit_pets3,

00:05:06.201 --> 00:05:09.283
nossa lista é criada na memória,
com o apontador pets,

00:05:09.316 --> 00:05:12.319
que aponta para o lugar
na memória onde a lista está.

00:05:13.348 --> 00:05:15.332
Na segunda linha
de edit_pets3,

00:05:15.365 --> 00:05:18.825
o valor Cody é removido da lista
com o apontador pets.

00:05:18.858 --> 00:05:21.604
A string Cody é removida
da lista

00:05:22.307 --> 00:05:25.268
e o resto da lista sofre um ajuste
para preencher o espaço

00:05:25.301 --> 00:05:26.827
deixado por Cody.

00:05:27.668 --> 00:05:29.629
Na terceira linha
de edit_pets3,

00:05:29.662 --> 00:05:33.388
o apontador pets é usado para anexar
Bella ao fim da lista.

00:05:34.187 --> 00:05:35.907
Na quarta linha
de edit_pets3,

00:05:35.940 --> 00:05:39.961
o apontador pets é usado para anexar
Buddy ao fim da lista.

00:05:40.994 --> 00:05:42.941
Na quinta linha
de edit_pets3,

00:05:42.974 --> 00:05:46.298
o apontador pets
é retornado a partir da função.

00:05:46.331 --> 00:05:48.384
Isso cria
o apontador "dogs",

00:05:48.417 --> 00:05:52.425
que também aponta para o lugar
na memória onde a lista está.

00:05:53.023 --> 00:05:55.129
Repare que, fora da função,

00:05:55.162 --> 00:05:57.565
o apontador pets
não existe mais,

00:05:57.629 --> 00:06:02.240
mas o apontador dogs e a lista
ainda existem na memória,

00:06:02.273 --> 00:06:05.150
porque a lista foi retornada
a partir da função.

00:06:05.918 --> 00:06:08.867
Na linha dois,
usando o apontador "dogs",

00:06:09.098 --> 00:06:11.965
a lista criada com edit_pets3
é exibida.

