WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:04.759
This is the solutions video for the command line arguments section.

00:00:04.759 --> 00:00:08.855
We first have to define get_input_args function.

00:00:08.855 --> 00:00:10.525
The doc string indicates,

00:00:10.525 --> 00:00:13.300
there are no arguments passed into the function,

00:00:13.300 --> 00:00:15.970
but we return parse_args.

00:00:15.970 --> 00:00:19.179
The data structure that stores the command line arguments.

00:00:19.179 --> 00:00:20.230
First thing we have to do,

00:00:20.230 --> 00:00:22.405
is create the parser object.

00:00:22.405 --> 00:00:24.900
Here, name parser.

00:00:24.899 --> 00:00:29.324
Next, we have to create the three command line arguments.

00:00:29.324 --> 00:00:36.464
The first 'dir,' is the command line argument that defaults to the pet_images folder,

00:00:36.465 --> 00:00:39.510
and is just the path to the images.

00:00:39.509 --> 00:00:44.304
Next, is the command line argument 'arch,' which we've

00:00:44.304 --> 00:00:49.950
defaulted to 'vgg,' but you could have picked any of the models.

00:00:49.950 --> 00:00:52.980
And this is just the chosen model.

00:00:52.979 --> 00:00:56.344
Finally, we have the dog file.

00:00:56.344 --> 00:00:59.765
This defaults to 'dognames.txt.'

00:00:59.765 --> 00:01:03.259
It's the text file that contains the dog names.

00:01:03.259 --> 00:01:08.120
Finally, we just return the parser argument.

00:01:08.120 --> 00:01:15.189
Next, we need to go to the main function where we call get_input_args.

00:01:15.189 --> 00:01:21.111
In the main function, we see get_input_args being called with no,

00:01:21.111 --> 00:01:23.475
arguments being passed in, which is correct.

00:01:23.474 --> 00:01:30.354
And it's returning these command line arguments as the variable in_arg.

00:01:30.355 --> 00:01:33.000
Next, we also wrote a print statement which is

00:01:33.000 --> 00:01:36.459
temporary and will be removed after we check this code.

00:01:36.459 --> 00:01:40.289
This print statement just prints out those three command line arguments.

00:01:40.290 --> 00:01:44.048
Notice the way they are called is the variable name dot,

00:01:44.048 --> 00:01:45.859
and then the command line argument name.

00:01:45.858 --> 00:01:48.074
For example, we have in_arg.dir

00:01:48.075 --> 00:01:57.284
to call that pet_images directory path.

00:01:57.284 --> 00:02:01.310
Now, we're going to run the program to check our code.

00:02:01.310 --> 00:02:04.335
In the terminal window here,

00:02:04.334 --> 00:02:08.560
I type python check images -h,

00:02:08.560 --> 00:02:12.400
to get the help file for our program.

00:02:12.400 --> 00:02:15.444
This shows me what the command line arguments are,

00:02:15.444 --> 00:02:18.310
and what they're expecting for each of them.

00:02:18.310 --> 00:02:20.890
In the second terminal window,

00:02:20.889 --> 00:02:25.250
I just type python check images.py. Hit enter.

00:02:25.250 --> 00:02:30.409
This printed out the default values for my command line arguments.

00:02:30.409 --> 00:02:32.645
Pet_images, the default directory,

00:02:32.645 --> 00:02:36.000
'vgg,' default model architecture,

00:02:36.000 --> 00:02:41.384
and dogsnames.txt, the default dog file.

00:02:41.384 --> 00:02:43.685
In this third terminal window,

00:02:43.685 --> 00:02:49.390
I input the three command line arguments for my 'dir' I just put pets,

00:02:49.389 --> 00:02:51.169
and that's what I see being print.

00:02:51.169 --> 00:02:56.769
For my architecture, I put 'resnet,' and that's what I see printed here.

00:02:56.770 --> 00:02:58.375
And then, for the dog file,

00:02:58.375 --> 00:03:02.705
I put dnames.txt, and that's what I see being printed here.

00:03:02.705 --> 00:03:06.000
So, it seems that all my code is working properly.

