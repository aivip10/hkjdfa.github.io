WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.609
我们来看

00:00:02.609 --> 00:00:06.765
人工神经网络的一个基础模型 该模型只有一个简单的隐藏层

00:00:06.764 --> 00:00:09.599
每个输入都分别与隐藏层的各神经元相连

00:00:09.599 --> 00:00:12.990
而这些神经元

00:00:12.990 --> 00:00:15.949
又分别与输出层的各神经元相连

00:00:15.949 --> 00:00:19.489
而输出层的每个神经元分别代表着一个输出

00:00:19.489 --> 00:00:23.644
我们可以将这个网络看成一个数学函数集

00:00:23.644 --> 00:00:26.390
每个输入都以一定的数学关系

00:00:26.390 --> 00:00:29.740
通过一系列权重与隐藏层的神经元相连

00:00:29.739 --> 00:00:36.509
而权重是我们需要调整的对象 隐藏层的每个神经元又以类似的方式与输出层相连

00:00:36.509 --> 00:00:40.074
无论是输入、

00:00:40.075 --> 00:00:44.010
隐藏层的神经元还是输出 都没有数量限制

00:00:44.009 --> 00:00:47.585
这些数字之间也没有任何相关性

00:00:47.585 --> 00:00:50.344
所以我们可以有 n 个输入

00:00:50.344 --> 00:00:54.535
m 个隐藏神经元和 k 个输出

00:00:54.534 --> 00:00:57.414
更具体通俗地来看

00:00:57.414 --> 00:01:00.240
每个输入会与

00:01:00.240 --> 00:01:06.120
相应的权重相乘 然后在下一层的神经元里与偏置相加

00:01:06.120 --> 00:01:09.510
偏置是神经元的外部参数

00:01:09.510 --> 00:01:13.140
可以用外部固定输入值进行建模

00:01:13.140 --> 00:01:15.829
这整个运算的和通常会输入到

00:01:15.829 --> 00:01:20.090
一个激活函数中 从而进入下一层或输出层

00:01:20.090 --> 00:01:22.344
但这样做的目的是什么呢？

00:01:22.344 --> 00:01:28.135
我们可以把整个系统看成一个黑盒子 盒子里有 n 个输入 k 个输出

00:01:28.135 --> 00:01:34.200
我们的目的就是设计一个系统 使其在输入 x 时

00:01:34.200 --> 00:01:36.665
能正确输出对应的 y

00:01:36.665 --> 00:01:40.865
我们要做的就是决定黑盒子里应该装什么

00:01:40.864 --> 00:01:45.699
我们知道自己想使用人工神经网络

00:01:45.700 --> 00:01:51.230
所以需要训练该网络成为一个特定的系统 使其能生成与某个输入相对应的正确输出

00:01:51.230 --> 00:01:54.145
至少大部分时候能生成正确输出

00:01:54.144 --> 00:02:00.140
本质上 我们要做的就是找出一批最优权重

00:02:00.140 --> 00:02:03.070
将输入与隐藏层连接起来

00:02:03.069 --> 00:02:07.019
再找出另一批最优权重 将隐藏层和输出连接起来

00:02:07.019 --> 00:02:12.960
或许我们永远找不到完美的预测方案 但我们可以尽可能地接近完美

