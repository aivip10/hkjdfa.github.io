WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.759
I'm going to discuss mutable and immutable data types and functions.

00:00:05.759 --> 00:00:09.689
Recall, you discussed mutable and immutable data types

00:00:09.689 --> 00:00:12.330
in the lesson Data Types and Operators,

00:00:12.330 --> 00:00:15.019
Lists and Membership Operators.

00:00:15.019 --> 00:00:17.939
To review, mutable data types can be changed after

00:00:17.940 --> 00:00:21.405
they're created and immutable data types can't.

00:00:21.405 --> 00:00:26.220
Immutable data types are boolean values, integers, floats, tuples,

00:00:26.219 --> 00:00:31.785
and strings whereas mutable data types are lists, dictionaries, and sets.

00:00:31.785 --> 00:00:35.820
As you learned in the lesson, Functions Variable Scope,

00:00:35.820 --> 00:00:41.381
immutable data types are passed into functions as a copy of the original object.

00:00:41.381 --> 00:00:46.934
This means that the changes that happen to the copy don't affect that original object.

00:00:46.935 --> 00:00:49.099
Whereas with mutable data types,

00:00:49.098 --> 00:00:52.589
they're passed into functions as a pointer to the original object.

00:00:52.590 --> 00:00:56.235
This means that changes that happened to that pointer within the function,

00:00:56.234 --> 00:00:59.924
change that original object.

00:00:59.924 --> 00:01:01.409
You can review the lesson,

00:01:01.409 --> 00:01:05.834
Functions Variable Scope, to review the scope of immutable data types.

00:01:05.834 --> 00:01:08.354
With this video, we'll be learning about the scope

00:01:08.355 --> 00:01:12.075
of mutable data types with the next three examples.

00:01:12.075 --> 00:01:14.850
Although our examples show lists,

00:01:14.849 --> 00:01:17.771
the same will be true for any mutable data type,

00:01:17.772 --> 00:01:20.292
like a dictionary or a set.

00:01:20.292 --> 00:01:21.629
With our first example,

00:01:21.629 --> 00:01:25.572
we'll see how a list scope is extended into a function,

00:01:25.572 --> 00:01:27.750
when that list is created outside the function,

00:01:27.750 --> 00:01:31.668
and then passed into that function as an argument.

00:01:31.668 --> 00:01:33.150
With our second example,

00:01:33.150 --> 00:01:36.780
we'll see that a list scope is limited to a function if

00:01:36.780 --> 00:01:41.081
that list is created within the function and not returned from that function.

00:01:41.081 --> 00:01:42.494
With our third example,

00:01:42.495 --> 00:01:45.765
we'll see a list scope can be extended beyond a function

00:01:45.765 --> 00:01:49.430
if that list is created and returned by that function.

00:01:49.430 --> 00:01:52.730
With our examples, the code will be on the left and what's

00:01:52.730 --> 00:01:56.480
happening within the memory of your computer is visible on the right.

00:01:56.480 --> 00:01:59.960
In this example, we'll see the list is created outside

00:01:59.959 --> 00:02:05.549
the function and then passed as an argument within the function.

00:02:05.549 --> 00:02:10.329
In line one, our list is created in memory with

00:02:10.330 --> 00:02:15.445
the pointer dogs that points the place in memory where the list is stored.

00:02:15.444 --> 00:02:22.134
In line two, we pass the pointer dogs as an argument into the function, edit pets.

00:02:22.134 --> 00:02:25.449
This creates a second pointer pets that also

00:02:25.449 --> 00:02:29.027
points to the place in memory where the list is stored.

00:02:29.027 --> 00:02:34.164
The pointer pets only exists within the function, edit pets.

00:02:34.164 --> 00:02:37.120
In the first line of edit pets,

00:02:37.120 --> 00:02:41.360
the value of Cody is popped from the list with the pets pointer.

00:02:41.360 --> 00:02:44.260
So, the string Cody is removed from the list,

00:02:44.259 --> 00:02:50.454
and the rest of the list is adjusted to fill the space vacated by Cody.

00:02:50.455 --> 00:02:53.380
With the second line in edit pets,

00:02:53.379 --> 00:02:58.521
the pointer pets is used to append Bella to the end of the list.

00:02:58.521 --> 00:03:00.429
With the third line in edit pets,

00:03:00.430 --> 00:03:04.675
the pointer pets is used to append Buddy to the end of the list.

00:03:04.675 --> 00:03:11.487
Notice that the plus equals operator can be used to append values to the end of a list.

00:03:11.487 --> 00:03:13.134
With the third line in the code,

00:03:13.134 --> 00:03:15.219
we print the list dogs.

00:03:15.219 --> 00:03:17.490
Notice that outside of the function,

00:03:17.490 --> 00:03:21.140
the pointer pets no longer exists in memory,

00:03:21.139 --> 00:03:28.039
but the changes pets made within the function do exist outside of the function.

00:03:28.039 --> 00:03:29.870
Using the pointer dogs,

00:03:29.870 --> 00:03:32.270
the list that will be printed is the one that was

00:03:32.270 --> 00:03:35.555
altered by the pointer pets within the function.

00:03:35.555 --> 00:03:40.159
In this example, we'll see that a list created inside a function that's not

00:03:40.159 --> 00:03:45.150
returned by that function only exists within that function.

00:03:45.150 --> 00:03:52.710
In line one, the function edit pets two is called and nothing exists yet in memory.

00:03:52.710 --> 00:03:54.689
In the first line of edit pets two,

00:03:54.689 --> 00:03:57.824
our list is created in memory with the pointer pets

00:03:57.824 --> 00:04:02.114
that points the place in memory where the list is stored.

00:04:02.115 --> 00:04:05.189
In the second line of edit pets two,

00:04:05.189 --> 00:04:09.284
the value Cody is popped from the list with the pets pointer.

00:04:09.284 --> 00:04:12.569
So, the string Cody is removed from the list

00:04:12.569 --> 00:04:17.969
and the rest of the list is adjusted to fill the space vacated by Cody.

00:04:17.970 --> 00:04:20.670
With the third line in edit pets two,

00:04:20.670 --> 00:04:25.050
the pointer pets is used to append Bella to the end of the list.

00:04:25.050 --> 00:04:28.689
With the fourth line in edit pets two,

00:04:28.689 --> 00:04:33.879
the pointer pets is used to append Buddy to the end of the list.

00:04:33.879 --> 00:04:36.925
With line two in the code,

00:04:36.925 --> 00:04:39.160
we print the string done.

00:04:39.160 --> 00:04:41.905
Notice that outside of the function,

00:04:41.904 --> 00:04:46.524
the pointer pets and the list no longer exist in memory.

00:04:46.524 --> 00:04:51.189
In this example, we see that a list created inside a function that is

00:04:51.189 --> 00:04:57.180
returned by that function exist outside that function.

00:04:57.180 --> 00:05:04.790
In line one, the function edit pets three is called and nothing exists in memory yet.

00:05:04.790 --> 00:05:06.655
In the first line of edit pets three,

00:05:06.654 --> 00:05:08.559
our list is created in memory with

00:05:08.560 --> 00:05:13.134
the pointer pets that points the place in memory where the list is stored.

00:05:13.134 --> 00:05:15.879
In the second line of edit pets three,

00:05:15.879 --> 00:05:18.310
the value Cody is popped from the list with

00:05:18.310 --> 00:05:21.459
the pets pointer so the string Cody is removed

00:05:21.459 --> 00:05:27.625
from the list and the rest of the list is adjusted to fill the space vacated by Cody.

00:05:27.625 --> 00:05:29.980
With the third line in edit pets three,

00:05:29.980 --> 00:05:34.725
the pointer pets is used to append Bella to the end of the list.

00:05:34.725 --> 00:05:36.430
With the fourth line of edit pets three,

00:05:36.430 --> 00:05:40.420
the pointer pets is used to append Buddy to the end of the list.

00:05:40.420 --> 00:05:46.900
With the fifth line and edit pets three the pointer pets is returned from the function.

00:05:46.899 --> 00:05:49.689
This creates the pointer dogs that also

00:05:49.689 --> 00:05:53.019
points to the place in memory where the list is stored.

00:05:53.019 --> 00:05:55.750
Notice that outside of the function,

00:05:55.750 --> 00:05:58.839
the pointer pets no longer exists but

00:05:58.839 --> 00:06:02.784
the pointer dogs and the list still exist in memory,

00:06:02.785 --> 00:06:06.443
because the list was returned from the function.

00:06:06.442 --> 00:06:09.474
In line two using the pointer dogs,

00:06:09.475 --> 00:06:12.720
the list that was created at edit pets three is printed.

