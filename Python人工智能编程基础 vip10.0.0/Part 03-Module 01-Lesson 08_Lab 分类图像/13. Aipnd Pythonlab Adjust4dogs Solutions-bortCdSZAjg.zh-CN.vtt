WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:04.113
本视频将讲解 adjust_results4_isadog 的解决方案

00:00:04.113 --> 00:00:09.734
首先 定义函数 adjust_results4_isadog

00:00:09.734 --> 00:00:14.519
这里的文档字符串指出我们有以下输入参数

00:00:14.519 --> 00:00:20.609
字典 results_dic 该字典以图像文件名为键 以列表为值

00:00:20.609 --> 00:00:22.980
字典列表包括

00:00:22.980 --> 00:00:24.524
宠物图像标签

00:00:24.524 --> 00:00:27.509
分类器标签以及两种标签的匹配结果

00:00:27.510 --> 00:00:32.804
在这个函数中 我们还要往列表里添加一些内容

00:00:32.804 --> 00:00:35.189
分别说明宠物标签和分类器标签是否为犬类

00:00:35.189 --> 00:00:39.509
还要输入的参数有文本文件 dogsfile

00:00:39.509 --> 00:00:44.280
该文件包含宠物图像标签和分类器标签都会用到的犬名

00:00:44.280 --> 00:00:46.200
能在这个文件中找到的标签

00:00:46.200 --> 00:00:48.195
都为犬类标签

00:00:48.195 --> 00:00:50.250
函数 adjust_results4_isadog 没有返回值

00:00:50.250 --> 00:00:53.085
因为字典 results_dic 是可变的

00:00:53.085 --> 00:00:56.625
所以字典在函数内部的变化

00:00:56.625 --> 00:00:58.725
会延续到函数外部

00:00:58.725 --> 00:01:01.995
首先 创建一个空字典 dognames_dic

00:01:01.994 --> 00:01:05.924
这个字典会存储 dogsfile 里的所有犬名

00:01:05.924 --> 00:01:10.245
接着 打开 dogsfile

00:01:10.245 --> 00:01:14.160
用 while 循环逐行读完整份文件

00:01:14.159 --> 00:01:19.973
我们必须先用函数 readline 读取第一行

00:01:19.974 --> 00:01:23.314
再进入 while 循环

00:01:23.314 --> 00:01:31.164
在循环里 用函数 rstrip 把跟在读取犬名后的空格删除

00:01:31.165 --> 00:01:36.954
如果字典 dognames_dic 尚无某个犬名

00:01:36.953 --> 00:01:38.274
那我们就将该犬名加入字典

00:01:38.275 --> 00:01:42.730
否则 就输出警告 说明已有重复犬名

00:01:42.730 --> 00:01:44.920
在循环末尾

00:01:44.920 --> 00:01:47.605
用函数 readline 读取下一行

00:01:47.605 --> 00:01:49.870
另外 我们要在循环开端使用条件语句

00:01:49.870 --> 00:01:52.170
检查是否继续处理下一行

00:01:52.170 --> 00:01:53.960
还是已经到达文件末尾

00:01:53.959 --> 00:01:55.439
如果下一行是空的

00:01:55.439 --> 00:01:57.164
那我们就到了文件末尾

00:01:57.165 --> 00:01:58.755
循环由此终止

00:01:58.754 --> 00:02:02.504
接着 对字典 results_dic 进行迭代

00:02:02.504 --> 00:02:06.810
判断标签是否为犬类 从而扩展列表值

00:02:06.810 --> 00:02:12.810
使用嵌套条件语句来确定标签是否为犬类

00:02:12.810 --> 00:02:17.280
若是 则用函数 extend 在列表末端追加两项

00:02:17.280 --> 00:02:21.314
第一项表明宠物标签是否为犬类

00:02:21.314 --> 00:02:25.560
第二项表明分类器标签是否为犬类

00:02:25.560 --> 00:02:28.289
如果能在 dognames_dic 中找到标签

00:02:28.289 --> 00:02:30.500
那就证明该标签为犬类

00:02:30.500 --> 00:02:32.215
在这段代码里

00:02:32.215 --> 00:02:34.735
我们发现宠物标签为犬类

00:02:34.735 --> 00:02:37.360
此时 如果分类器标签也为犬类

00:02:37.360 --> 00:02:39.550
那就在列表中追加值 (1 1)

00:02:39.550 --> 00:02:41.995
如果分类器标签不为犬类

00:02:41.995 --> 00:02:44.740
那就在列表中追加值 (1 0)

00:02:44.740 --> 00:02:48.805
在这段代码里 我们发现宠物标签不为犬类

00:02:48.805 --> 00:02:51.205
此时 如果分类器标签为犬类

00:02:51.205 --> 00:02:53.094
那就追加值 (0 1)

00:02:53.094 --> 00:02:55.330
如果分类器标签不为犬类

00:02:55.330 --> 00:02:57.295
那就追加值 (0 0)

00:02:57.294 --> 00:03:00.039
这样 results_dic 就修改好了

00:03:00.039 --> 00:03:03.280
可用来表明标签是否为犬类了 函数到此结束

00:03:03.280 --> 00:03:10.250
这里 我们在主函数里调用了函数 adjust_results4_isadog

00:03:10.250 --> 00:03:13.129
该函数没有任何返回内容

00:03:13.129 --> 00:03:20.052
adjust_results4_isadog 的输入参数有

00:03:20.052 --> 00:03:23.914
字典 result_dic 该字典由函数 classifier_images 返回而出

00:03:23.914 --> 00:03:28.429
以图像文件名为键

00:03:28.430 --> 00:03:30.290
以列表为值

00:03:30.289 --> 00:03:33.125
其列表值包含宠物图像标签、

00:03:33.125 --> 00:03:36.020
分类器标签和标签匹配结果

00:03:36.020 --> 00:03:37.880
等函数 adjust_results4_isadog 运行完毕

00:03:37.879 --> 00:03:43.650
这个字典的列表就会得到追加 从而说明标签是否为犬类

00:03:43.650 --> 00:03:49.689
函数还有一个参数是 in-arg.dogfile 这是文本文件的命令行参数

00:03:49.689 --> 00:03:53.004
该文本文件包括

00:03:53.004 --> 00:03:57.174
宠物图像标签和分类器标签都会用到的所有犬名

00:03:57.175 --> 00:04:01.795
我们用这里的临时代码来检查代码

00:04:01.794 --> 00:04:04.344
依次输出所有匹配结果

00:04:04.344 --> 00:04:06.909
和不匹配结果

00:04:06.909 --> 00:04:11.319
观察犬类标签的代码是否正确

00:04:11.319 --> 00:04:14.349
然后检查

00:04:14.349 --> 00:04:18.189
不匹配数加匹配数是否等于 40 也即是否符合实际图像数

00:04:18.189 --> 00:04:22.800
我们来看终端窗口 进行代码检查

00:04:26.149 --> 00:04:29.439
可以看到这上面

00:04:29.439 --> 00:04:33.459
调用了程序 check_images.py

00:04:33.459 --> 00:04:35.469
下面先输出了匹配结果

00:04:35.470 --> 00:04:41.035
看来所有犬类和非犬类标签都得到了正确分类

00:04:41.035 --> 00:04:46.060
向下滑动滚轮 我们可以看到不匹配的图像

00:04:46.060 --> 00:04:50.500
这些犬类或非犬类图像也得到了正确分类

00:04:50.500 --> 00:04:53.004
匹配数为 35

00:04:53.004 --> 00:04:56.949
不匹配数为 5 加起来就是 40 与实际的图像数目相符

00:04:56.949 --> 00:04:59.949
可见代码无误

