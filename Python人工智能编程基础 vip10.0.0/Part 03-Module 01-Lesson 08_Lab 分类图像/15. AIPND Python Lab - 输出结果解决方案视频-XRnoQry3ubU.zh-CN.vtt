WEBVTT
Kind: captions
Language: zh-CN

00:00:00.060 --> 00:00:04.494
本视频将讲解结果输出部分的解决方案

00:00:04.495 --> 00:00:07.280
首先 定义函数 print_results

00:00:07.280 --> 00:00:11.275
这里的文档字符串指出我们有五个输入参数

00:00:11.275 --> 00:00:14.705
最后两个参数有默认值

00:00:14.705 --> 00:00:19.120
第一个参数 results_dic 是一个字典 以文件名为键

00:00:19.120 --> 00:00:21.644
以列表为值

00:00:21.644 --> 00:00:25.535
我们需要借助该字典来输出分类错误的犬类和犬种

00:00:25.535 --> 00:00:31.524
第二个参数为 results_stats 该字典由函数 calculates_results_stats
返回而出

00:00:31.524 --> 00:00:34.460
字典包含各项百分比和数量统计数据

00:00:34.460 --> 00:00:37.895
对算法的图像分类效果进行了汇总

00:00:37.895 --> 00:00:43.840
该字典以统计数据名为键 以统计数据值为值

00:00:43.840 --> 00:00:49.700
第三个参数为 model 即用于图像分类的 CNN 模型结构

00:00:49.700 --> 00:00:52.220
输出语句少不了该参数

00:00:52.219 --> 00:00:56.049
第四个参数是布尔值 print_incorrect_dogs

00:00:56.049 --> 00:01:00.504
如果该值为真 则会输出被字典 results_dic 错误分类的犬类

00:01:00.505 --> 00:01:05.799
如果没有错误分类可输出 该参数就默认为  False

00:01:05.799 --> 00:01:10.209
第五个参数是布尔值 print_incorrect_breed

00:01:10.209 --> 00:01:14.989
当其为真时 会输出被字典 results_dic 错误分类的犬种

00:01:14.989 --> 00:01:17.750
如果没有错误分类可输出

00:01:17.750 --> 00:01:19.924
参数就默认为 False

00:01:19.924 --> 00:01:23.524
由于我们只输出结果 所以函数 print_results 没有返回内容

00:01:23.525 --> 00:01:27.040
首先 函数会输出 CNN 模型结构

00:01:27.040 --> 00:01:29.080
图像数量

00:01:29.079 --> 00:01:32.789
犬类图像数量和非犬类图像数量

00:01:32.790 --> 00:01:36.040
接着 函数会输出各项百分比

00:01:36.040 --> 00:01:40.540
对各算法的图像分类效果进行汇总

00:01:40.540 --> 00:01:42.190
注意 为了汇总 需要对字典 results_stats 进行迭代

00:01:42.189 --> 00:01:47.605
为了只输出百分比

00:01:47.605 --> 00:01:50.885
我们需要找出以字母 P 开头的统计数据

00:01:50.885 --> 00:01:56.520
这个部分的函数会输出被错误分类的犬类

00:01:56.519 --> 00:02:01.484
如果 print_incorrect_dogs 为真 那就意味着有犬类被错误分类了

00:02:01.484 --> 00:02:05.073
为此 函数会对字典 results_dic 进行迭代

00:02:05.073 --> 00:02:09.270
找出分类错误的犬类并将其输出出来

00:02:09.270 --> 00:02:14.320
在最后这个部分里 函数会输出被错误分类的犬种

00:02:14.319 --> 00:02:17.639
print_incorrect_breed 为真

00:02:17.639 --> 00:02:21.089
意味着有犬种被错误分类了

00:02:21.090 --> 00:02:23.865
函数会对字典 results_dic 进行迭代

00:02:23.865 --> 00:02:30.125
找到被错误分类的犬种并将其输出出来

00:02:30.125 --> 00:02:32.745
函数到此结束

00:02:32.745 --> 00:02:37.620
最后 程序会调用主函数

00:02:37.620 --> 00:02:42.465
这里 我们在主函数里调用了函数 print_results

00:02:42.465 --> 00:02:46.879
由于我们只输出结果 所以函数没有返回内容

00:02:46.879 --> 00:02:51.259
函数有三个必要参数 但可以输入最多五个参数

00:02:51.259 --> 00:02:57.185
第一个参数是字典 result_dic 该字典以文件名为键 以列表为值

00:02:57.185 --> 00:03:00.090
是必要参数

00:03:00.090 --> 00:03:03.819
要输出被错误分类的犬类和犬种 此函数必不可少

00:03:03.819 --> 00:03:09.840
第二个参数是字典 results_stats_dic 该字典由函数 calculate_result_stats
返回而出

00:03:09.840 --> 00:03:13.110
是必要参数 包含了各项百分比和数量统计数据

00:03:13.110 --> 00:03:17.985
对算法的图像分类效果进行了汇总

00:03:17.985 --> 00:03:21.490
还有一个参数是 in_arg.arch

00:03:21.490 --> 00:03:26.280
这是 CNN 模型结构的命令行参数 用于图像分类

00:03:26.280 --> 00:03:28.259
也是必要参数

00:03:28.259 --> 00:03:31.394
布尔值参数 True

00:03:31.395 --> 00:03:35.575
此参数会输出被字典 results_dic 错误分类的犬类

00:03:35.574 --> 00:03:38.129
不是必要参数

00:03:38.129 --> 00:03:42.599
如果没有可输出的错误分类 则默认为 False

00:03:42.599 --> 00:03:44.775
布尔值参数 True

00:03:44.775 --> 00:03:49.129
此参数会输出被字典 results_dic 错误分类的犬种

00:03:49.129 --> 00:03:51.539
不是必要参数

00:03:51.539 --> 00:03:54.900
如果没有可输出的错误分类 则默认为 False

00:03:54.900 --> 00:03:58.560
这是函数唯一的临时代码 这段带注释的代码

00:03:58.560 --> 00:04:03.629
调用了外部函数 以便检查默认参数是否正确

00:04:03.629 --> 00:04:08.403
我们来看终端窗口

00:04:08.403 --> 00:04:10.960
第一个终端窗口

00:04:10.960 --> 00:04:13.390
运行着上一节的代码

00:04:13.389 --> 00:04:18.120
当时我们检查了百分比和数量统计的正确性

00:04:18.120 --> 00:04:22.105
现在将这些数据与第二个终端窗口里的进行比较

00:04:22.105 --> 00:04:26.830
在第二个窗口里 我们运行了 print_results 但由于运行时我们还测试了默认参数

00:04:26.829 --> 00:04:29.680
所以按理说 第二个窗口不会输出任何被错误分类的犬种

00:04:29.680 --> 00:04:33.470
因为犬种分类错误是唯一的错误情况

00:04:33.470 --> 00:04:36.225
所以第二个窗口不会输出相应的内容

00:04:36.225 --> 00:04:37.975
来看第二个窗口

00:04:37.975 --> 00:04:39.700
可以看到 程序运行后

00:04:39.699 --> 00:04:42.550
没有任何有关犬种被错误分类的输出

00:04:42.550 --> 00:04:46.435
犬类和非犬类得到正确分类的百分比

00:04:46.435 --> 00:04:48.355
与第一个终端窗口的数据一致

00:04:48.355 --> 00:04:50.410
可见程序无误

00:04:50.410 --> 00:04:54.070
到目前为止 程序运行良好

00:04:54.069 --> 00:04:56.314
接着 检查第三个终端窗口

00:04:56.314 --> 00:05:00.625
这次我们允许程序输出被错误分类的犬种和犬类

00:05:00.625 --> 00:05:05.649
但由于没有犬类被错误分类了 所以程序只输出分类错误的犬种

00:05:05.649 --> 00:05:08.454
结果如我们所料 数据也相符

00:05:08.454 --> 00:05:11.529
也就是说 程序无误

00:05:11.529 --> 00:05:14.949
程序运行顺利 想来你应该很兴奋了

00:05:14.949 --> 00:05:18.985
最后 我们可以分别用三种模型结构来运行这个程序

00:05:18.985 --> 00:05:22.205
所以 在第四个终端窗口中 我们进行了批处理

00:05:22.204 --> 00:05:26.314
我来快速点击一下相关文件 让你们看看结果

00:05:26.314 --> 00:05:29.680
这是 alexnet 模型的结果 这是 resnet 的

00:05:29.680 --> 00:05:35.170
这是 vgg 的 你可以把这些数据和下一节的结果进行对比

00:05:35.170 --> 00:05:38.050
恭喜你顺利完成了 lab 任务

