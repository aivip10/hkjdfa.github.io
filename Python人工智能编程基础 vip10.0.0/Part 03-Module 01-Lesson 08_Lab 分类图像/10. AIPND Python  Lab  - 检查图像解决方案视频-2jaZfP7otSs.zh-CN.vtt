WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.990
本视频将讲解宠物图像标签的答案

00:00:03.990 --> 00:00:08.483
首先 定义函数 get_pet_labels

00:00:08.483 --> 00:00:10.419
这里的文档字符串指出

00:00:10.419 --> 00:00:14.955
我们将输入参数 image_dir

00:00:14.955 --> 00:00:18.846
该参数其实就是包含着所有宠物图像的文件夹的路径

00:00:18.846 --> 00:00:21.495
函数会返回字典 patlabels_dic

00:00:21.495 --> 00:00:25.335
该字典以图像文件名为键

00:00:25.335 --> 00:00:28.275
以宠物图像标签为值

00:00:28.274 --> 00:00:32.339
在函数中 我们先创建列表 in_files

00:00:32.340 --> 00:00:36.665
列表包含 pet_images 文件夹中的所有文件名

00:00:36.664 --> 00:00:40.530
接着 创建一个空字典 petlabels_dic

00:00:40.530 --> 00:00:45.429
这就是函数会返回的字典了

00:00:46.869 --> 00:00:53.684
我们用 for 循环来遍历列表 in_files 中的所有文件名

00:00:53.685 --> 00:00:56.700
从而创建宠物图像标签

00:00:56.700 --> 00:00:58.800
在循环中 先用条件语句

00:00:58.799 --> 00:01:02.204
跳过所有以 “.” 开头的文件

00:01:02.204 --> 00:01:05.914
如果你用的是苹果电脑 那就要写上这个条件语句

00:01:05.915 --> 00:01:08.250
如果你是在 lab 的 workspace 里进行操作

00:01:08.250 --> 00:01:10.510
那就不需要写出

00:01:10.510 --> 00:01:16.050
接着 根据下划线分隔符 将图像文件名分割成若干个词 做成列表

00:01:16.049 --> 00:01:21.804
变量 image_name 就是这个词列表在内存中的指针

00:01:21.805 --> 00:01:25.480
接着 创建空字符串变量 pet_label

00:01:25.480 --> 00:01:32.094
该变量会储存从文件名中提取出来的宠物图像标签

00:01:32.094 --> 00:01:34.900
接着 用 for 循环创建 pet_label

00:01:34.900 --> 00:01:38.020
循环会遍历 image_name 里的每个词

00:01:38.019 --> 00:01:39.939
如果词只由字母组成

00:01:39.939 --> 00:01:42.159
循环就会把这个词以字符串的形式添加到 pet_label 里

00:01:42.159 --> 00:01:47.219
设字符串为全小写 且末端各带一个空格

00:01:47.810 --> 00:01:54.010
将词列表中仅含字母的词提取出来后

00:01:54.010 --> 00:01:56.650
把 pet_label 中跟在词后的空格删除掉

00:01:56.650 --> 00:01:58.685
删除用函数 strip 即可

00:01:58.685 --> 00:02:00.655
在循环末尾

00:02:00.655 --> 00:02:02.859
如果字典 petlabels_dic 还没有某个宠物标签

00:02:02.859 --> 00:02:06.579
那就把相应的 pet_label 添加进去

00:02:06.579 --> 00:02:11.425
字典以文件名为键 以宠物图像标签为值

00:02:11.425 --> 00:02:13.935
注意 如果字典里已有相应的文件名

00:02:13.935 --> 00:02:16.092
那就输出警告

00:02:16.092 --> 00:02:20.269
因为 pet_images 文件夹不应有重复的文件名

00:02:20.270 --> 00:02:24.545
最后 将包含着宠物图像标签的字典返回出来

00:02:24.544 --> 00:02:27.004
这里 我们在主函数中

00:02:27.004 --> 00:02:31.079
调用了函数 get_pet_labels

00:02:31.080 --> 00:02:33.065
注意输入的参数是 in_arg.dir

00:02:33.064 --> 00:02:36.365
也即指示图像所在文件夹

00:02:36.365 --> 00:02:40.165
的那个命令行参数

00:02:40.164 --> 00:02:42.364
调用后程序会返回字典 answers_dic

00:02:42.365 --> 00:02:44.585
该字典以文件名为键

00:02:44.585 --> 00:02:46.930
以那些宠物图像标签

00:02:46.930 --> 00:02:48.840
为值

00:02:48.840 --> 00:02:51.724
这里的输出语句是临时的

00:02:51.724 --> 00:02:55.759
用于检查 40 个键值对有没有缺失

00:02:55.759 --> 00:02:59.264
我们还要检查其中的 10 个键值对

00:02:59.264 --> 00:03:03.739
确保文件名得到了正确的处理 生成了相应的宠物图像标签

00:03:03.740 --> 00:03:05.585
我们来看终端窗口

00:03:05.585 --> 00:03:08.750
我已经运行好程序并检查好代码了

00:03:08.750 --> 00:03:12.500
你可以看到 我运行了 python check_images

00:03:12.500 --> 00:03:16.710
如我们所料 总共有 40 个键值对 和实际相符

00:03:16.710 --> 00:03:19.250
这下面输出了前十个键值对

00:03:19.250 --> 00:03:22.514
我们可以看到 文件名得到了正确的处理

00:03:22.514 --> 00:03:26.519
所有宠物图像标签都以小写字母写出

00:03:26.520 --> 00:03:30.469
标签的词与词之间也有空格

00:03:30.469 --> 00:03:33.680
由此可见 操作无误

