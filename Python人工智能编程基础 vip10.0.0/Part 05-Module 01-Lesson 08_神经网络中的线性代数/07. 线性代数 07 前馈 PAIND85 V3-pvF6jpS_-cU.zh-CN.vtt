WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:02.390
完成了第一步

00:00:02.390 --> 00:00:04.730
现在我们来进行第二步

00:00:04.730 --> 00:00:10.754
用刚才求得的 h 值来求输出 y

00:00:10.753 --> 00:00:13.439
由于我们的输出不止一个

00:00:13.439 --> 00:00:15.424
所以 y 也是一个向量

00:00:15.425 --> 00:00:17.870
我们有初始输入 h

00:00:17.870 --> 00:00:21.609
目的是借此求得输出 y 的值

00:00:21.609 --> 00:00:27.625
从数学的角度看 第二步的过程和第一步一样

00:00:27.625 --> 00:00:29.795
现在我们的输入是 h

00:00:29.795 --> 00:00:35.789
权重矩阵是 W2

00:00:35.789 --> 00:00:38.539
输出则为向量 y

00:00:38.539 --> 00:00:40.609
注意 权重矩阵有三行

00:00:40.609 --> 00:00:44.494
因为隐藏层有三个神经元

00:00:44.494 --> 00:00:48.299
两列 因为我们只有两个输出

00:00:48.299 --> 00:00:52.584
还是一样 让向量和矩阵相乘

00:00:52.585 --> 00:00:57.020
向量 h 与权重矩阵 W2 相乘

00:00:57.020 --> 00:00:59.475
就能求得输出向量 y

00:00:59.475 --> 00:01:08.115
我们可以把这个过程写成一个简单的方程式 即 y = h * W 得到输出后

00:01:08.114 --> 00:01:11.269
不一定要用激活函数

00:01:11.269 --> 00:01:14.744
要很好地逼近输出 y

00:01:14.745 --> 00:01:17.850
一个隐藏层是不够的

00:01:17.849 --> 00:01:20.164
我们需要十层 甚至更多

00:01:20.165 --> 00:01:24.240
这里我用 p 泛指 p 层

00:01:24.239 --> 00:01:28.054
每一层都可以有不同数量的神经元

00:01:28.055 --> 00:01:29.705
正如我之前提到的

00:01:29.704 --> 00:01:31.539
每一层都可以有数千个神经元

00:01:31.540 --> 00:01:34.700
基本上 你可以把这些神经元

00:01:34.700 --> 00:01:37.980
看成可以堆砌的砖块或乐高积木

00:01:37.980 --> 00:01:41.835
那这个过程要怎么转换成数学运算呢？ 就跟之前一样

00:01:41.834 --> 00:01:44.723
只需将向量和矩阵相乘

00:01:44.724 --> 00:01:47.140
然后将结果代入激活函数

00:01:47.140 --> 00:01:50.129
其中 向量为输入

00:01:50.129 --> 00:01:55.685
矩阵为连接相邻两层的权重

00:01:55.685 --> 00:01:58.295
我们来进行模型归纳

00:01:58.295 --> 00:02:01.280
来看一个随机 K 层模型

00:02:01.280 --> 00:02:06.040
其中连接 K 和 K + 1 层的权重 Wij

00:02:06.040 --> 00:02:12.564
位于第 i 个输入与第 j 个输出之间

00:02:12.564 --> 00:02:14.500
你最好拿支笔做下笔记

00:02:14.500 --> 00:02:18.504
因为这是很重要的数学推导过程

00:02:18.504 --> 00:02:20.215
你可以一边听数学推导

00:02:20.215 --> 00:02:23.990
一边暂停 在笔记里将推导记录下来

00:02:23.990 --> 00:02:28.370
我们把 K 层作为输入 x

00:02:28.370 --> 00:02:35.409
把 K+ 1 层作为隐藏层 h 的输出

00:02:35.409 --> 00:02:40.370
因此 我们会有 n 个 x 输入和 m 个 h 输出

00:02:40.370 --> 00:02:43.735
顺便提一句 如果我们处理的不是输入

00:02:43.735 --> 00:02:47.640
而是上一个隐藏层的输出

00:02:47.639 --> 00:02:51.854
那唯一要改的只有这些字母

00:02:51.854 --> 00:02:54.369
计算过程是一样的

00:02:54.370 --> 00:02:56.775
所以我们用简单的表示符号就好

00:02:56.775 --> 00:03:04.340
就还是 x 吧 h1 是一个激活函数的输出

00:03:04.340 --> 00:03:07.810
该函数以

00:03:07.810 --> 00:03:13.110
每个输入 xi 与相应权重 Wi1 乘积的和为参数

00:03:13.110 --> 00:03:18.870
以此类推 hm 也是一个激活函数的输出

00:03:18.870 --> 00:03:21.905
该函数以

00:03:21.905 --> 00:03:26.784
每个输入 xi 与相应权重 Wim 乘积的和为参数

00:03:26.784 --> 00:03:30.984
举个例子 如果我们有三个输入

00:03:30.985 --> 00:03:33.745
想要计算 h1 的话

00:03:33.745 --> 00:03:40.480
只需将下列线性组合代入激活函数 求得输出结果即可

