WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.660
本视频将讲解图像分类部分的解决方案

00:00:03.660 --> 00:00:08.714
首先 定义函数 classify_images

00:00:08.714 --> 00:00:15.972
这里的文档字符串指出 我们会有以下输入参数：

00:00:15.973 --> 00:00:18.990
image_ dir 该参数指向存有宠物图像的文件夹

00:00:18.989 --> 00:00:26.640
Petlabel_dic 即我们在函数 get_pet_labels 中创建的字典

00:00:26.640 --> 00:00:33.840
该字典以图像文件名为键 以宠物图像标签为值

00:00:33.840 --> 00:00:40.035
model 即你用来分类图像的 CNN 模型结构

00:00:40.034 --> 00:00:42.914
可设为 resnet、alexnet 或 vgg 的任一个值

00:00:42.914 --> 00:00:48.045
输入值时需全小写

00:00:48.045 --> 00:00:52.650
函数会返回字典 results_dic

00:00:52.649 --> 00:00:59.789
该字典以图像文件名为键 以列表为值

00:00:59.789 --> 00:01:05.489
在字典列表中 索引 0 为宠物图像标签

00:01:05.489 --> 00:01:08.369
索引 1 为分类器标签

00:01:08.370 --> 00:01:11.850
索引 2 则会指出

00:01:11.849 --> 00:01:18.530
分类器标签和宠物图像标签是否匹配

00:01:19.900 --> 00:01:24.135
在函数中 我们要创建一个空字典 results_dic

00:01:24.135 --> 00:01:28.020
该字典会在函数末尾返回出来

00:01:28.019 --> 00:01:30.719
接着 用 for 循环对字典 petlabel_dic 进行迭代

00:01:30.719 --> 00:01:36.870
遍历字典中的所有宠物图像

00:01:36.870 --> 00:01:38.790
在 for 循环里

00:01:38.790 --> 00:01:41.205
用分类器函数 classifier 分类各宠物图像时

00:01:41.204 --> 00:01:44.340
我们需要用到宠物图像文件名

00:01:44.340 --> 00:01:48.299
我们会对分类器函数返回出来的标签进行格式化

00:01:48.299 --> 00:01:52.659
还要确定宠物标签和分类器标签是否匹配

00:01:52.659 --> 00:01:53.924
在循环末尾

00:01:53.924 --> 00:01:56.280
将每个文件名的标签与标签匹配结果

00:01:56.280 --> 00:02:00.230
添加到字典 results_dic 中

00:02:00.230 --> 00:02:03.245
在 for 循环中 首先

00:02:03.245 --> 00:02:08.194
用函数 classifier 创建分类器标签

00:02:08.194 --> 00:02:14.449
函数会将结果作为 model_label 返回出来 在函数 classifier 中 我们要输入模型

00:02:14.449 --> 00:02:17.629
和 pet_images 文件夹的全路径

00:02:17.629 --> 00:02:20.150
这里的键为文件名

00:02:20.150 --> 00:02:25.760
image_dir 指的是那个 pet_images 文件夹

00:02:25.759 --> 00:02:28.819
接着处理这些分类器标签

00:02:28.819 --> 00:02:33.709
用函数 lower 将所有字母设为小写字母

00:02:33.710 --> 00:02:39.860
用函数 strip 来删除前后的空格

00:02:39.860 --> 00:02:44.870
记住 petlabel_dic 的值

00:02:44.870 --> 00:02:49.700
是宠物图像标签 我们将其赋给 truth

00:02:49.699 --> 00:02:52.609
这一行用函数 find 来检查

00:02:52.610 --> 00:02:59.230
分类器标签里是否有 truth 所指的宠物图像标签

00:03:00.770 --> 00:03:04.495
如果函数 found 的值大于 0

00:03:04.495 --> 00:03:08.125
那就意味着我们在分类器标签里找到了宠物标签

00:03:08.125 --> 00:03:12.490
有时候 宠物标签是短单词 比如 cat 或 fox

00:03:12.490 --> 00:03:17.433
这些词可能嵌在 foxhound (猎狐犬) 或 polecat (臭鼬) 里 要处理这种问题

00:03:17.432 --> 00:03:20.514
我们就得用另一个条件语句

00:03:20.514 --> 00:03:23.439
这个条件语句检查

00:03:23.439 --> 00:03:27.115
宠物标签的第一个字母是否也是分类器标签的第一个字母

00:03:27.115 --> 00:03:28.832
也就是宠物标签前是否有空格

00:03:28.832 --> 00:03:31.599
此外 该语句还会检查宠物标签的最后一个字母是否也是分类器标签的最后一个字母

00:03:31.599 --> 00:03:35.409
也就是宠物标签后是否有空格或逗号

00:03:35.409 --> 00:03:38.389
一旦这两个条件同时为真

00:03:38.389 --> 00:03:43.044
我们就把比较值设为 1 并添加到字典 results_dic 中

00:03:43.044 --> 00:03:46.794
如果有一个条件为假

00:03:46.794 --> 00:03:50.739
那就将比较值设为 0 并添加到 results_dic 中

00:03:50.740 --> 00:03:57.594
最后 在函数末尾返回字典 results_dic

00:03:57.594 --> 00:04:02.727
这里 我们在主函数中调用了函数 classifier_images

00:04:02.727 --> 00:04:06.430
classifier_images 会返回字典 result_dic

00:04:06.430 --> 00:04:09.670
其中 字典键为图像文件名

00:04:09.669 --> 00:04:13.022
值为列表 列表中包含了宠物图像标签、

00:04:13.022 --> 00:04:16.089
分类器标签以及两种标签的匹配结果

00:04:16.089 --> 00:04:20.169
classify_images 要输入的参数有 in_arg.dir

00:04:20.170 --> 00:04:25.098
即指明 pet_images 文件夹路径的命令行参数

00:04:25.098 --> 00:04:27.879
字典 answers_dic 该字典以图像文件名为键

00:04:27.879 --> 00:04:30.805
以宠物图像标签为值

00:04:30.805 --> 00:04:37.310
in_arg.arch 即 CNN 模型结构的命令行参数

00:04:37.310 --> 00:04:42.910
用这里的临时代码来检查代码效果

00:04:42.910 --> 00:04:46.090
依次输出匹配和不匹配结果

00:04:46.089 --> 00:04:49.554
进行观察 确保代码无误

00:04:49.555 --> 00:04:52.240
我们还要检查

00:04:52.240 --> 00:04:55.345
不匹配数加匹配数是否等于总图像数 即 40

00:04:55.345 --> 00:04:57.410
如果我们打开终端窗口

00:04:57.410 --> 00:05:00.785
就可以看到这里运行的程序了

00:05:00.785 --> 00:05:03.560
程序依次输出了匹配数

00:05:03.560 --> 00:05:08.269
和不匹配数 两者都是正确的

00:05:08.269 --> 00:05:10.504
我们总共有 40 个图像

00:05:10.504 --> 00:05:14.675
匹配数为 35 不匹配数为 5

00:05:14.675 --> 00:05:16.740
可见代码无误

